import{aB as e,Z as t,a3 as n}from"./@vue.78dd21e6.js";import"./highlight.js.02565251.js";const p={class:"markdown-body"},r=[n('<h1>Examples</h1><h2>createDatePicker <em>(input: HTMLInputElement,options)=&gt;void</em></h2><pre><code>const input = document.querySelector(&#39;#input&#39;)\nconst picker = createDatePicker(input, {\n  type: &#39;week&#39;,\n  offset: 20,\n  placement: &#39;bottom&#39;,\n})\n</code></pre><h2>destroyed <em>()=&gt;void</em></h2><pre><code>const input = document.querySelector(&#39;#input&#39;)\nconst picker = createDatePicker(input)\npicker.destroyed()\n</code></pre><h2>destroy <em>(pickers?: State[])=&gt;void</em></h2><pre><code>const input = document.querySelector(&#39;#input&#39;)\nconst picker = createDatePicker(input, {\n  type: &#39;week&#39;,\n  offset: 20,\n  placement: &#39;bottom&#39;,\n})\n</code></pre><h2>USE IN VUE</h2><p>Reactive updates have been supported since version <a href="https://www.npmjs.com/package/better-datepicker/v/0.2.3">0.2.2</a></p><p>When a property of props is changed, the datepicker is also updated. you donâ€™t need to update manually</p><pre><code class="language-vue">&lt;template&gt;\n  &lt;el-input ref=&#39;input&#39;&gt;&lt;/el-input&gt;\n&lt;/template&gt;\n\n&lt;script lang=&#39;ts&#39;&gt;\nimport &#39;../../../assets/svg/svg&#39;\nimport { defineComponent, toRefs } from &#39;vue&#39;\n\nimport { createDatePicker } from &#39;../../../../../src&#39;\n\nexport default defineComponent({\n  name: &#39;datepicker&#39;,\n  props:{\n    placeholder: String,\n    //....\n  },\n  data() {\n    return {\n      datepicker: null,\n    }\n  },\n  mounted() {\n    const input = this.$refs.input\n    this.datepicker = createDatePicker(input.$el, this.$props)\n  },\n  beforeUnmount() {\n    this.datepicker.destroyed()\n  }\n})\n&lt;/script&gt;\n\n</code></pre>',11)],o={setup:(n,{expose:o})=>(o({frontmatter:{}}),(n,o)=>(e(),t("div",p,r)))};export{o as default};
